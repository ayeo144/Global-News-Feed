name: Deploy to ECR

on: 
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-2     
  ECS_CLUSTER: global-news-feed-cluster     
  ECS_TASK_DEFINITION: .aws/ecs-etl-task.json 
  CONTAINER_NAME: global-news-feed-etl-container

jobs:
  
  # Build the Docker image containing the ETL code and push it to
  # an AWS Elastic Container Repository for use in other AWS services.
  #
  # Unit tests for the code are run during building the Docker image, 
  # hencenthere is not 'test' step in this pipeline.
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: global-news-feed
        IMAGE_TAG: etl_image   
      # During building the image we need to pass important environment variables
      # from Github Actions secrets to the Docker image, which are required for the
      # ETL code to interact with API's an AWS services.
      run: |
        cd etl
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
        --build-arg NEWS_API_KEY=${{ secrets.NEWS_API_KEY }} \
        --build-arg AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \
        --build-arg AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
        --build-arg S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
        --build-arg DB_USERNAME=${{ secrets.DB_USERNAME }} \
        --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
        --build-arg DB_HOST=${{ secrets.DB_HOST }} \
        --build-arg DB_PORT=${{ secrets.DB_PORT }} \
        --build-arg DB_NAME=${{ secrets.DB_NAME }} \
        -f production.Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    # - name: Execute my ECS Task
    #   uses: apfm-actions/aws-ecs-exec-action@master
    #   with:
    #     project: 'examples'
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     name: 'global-news-feed-task'
    #     image: ${{ steps.build-image.outputs.image }}
    #     version: 'latest'
    #     cpu: 256
    #     memory: 512
    #     exec_role: 'ecsTaskExecutionRoleDefault'
    #     wait: true
    #     timeout: 600