name: Deploy to ECR

on: 
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-2     
  ECS_SERVICE: global-news-feed-service
  ECS_CLUSTER: global-news-feed-cluster     
  ECS_TASK_DEFINITION: .aws/ecs-etl-task.json 
  CONTAINER_NAME: global-news-feed-etl-container

jobs:
  
  # Build the Docker image containing the ETL code and push it to
  # an AWS Elastic Container Repository for use in other AWS services.
  #
  # Unit tests for the code are run during building the Docker image, 
  # hencenthere is not 'test' step in this pipeline.
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: global-news-feed
        IMAGE_TAG: etl_image   
      # During building the image we need to pass important environment variables
      # from Github Actions secrets to the Docker image, which are required for the
      # ETL code to interact with API's an AWS services.
      run: |
        cd etl
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
        --build-arg NEWS_API_KEY=${{ secrets.NEWS_API_KEY }} \
        --build-arg AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \
        --build-arg AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
        --build-arg S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
        --build-arg AWS_DB_INSTANCE_ID=${{ secrets.AWS_DB_INSTANCE }} \
        --build-arg AWS_DB_USERNAME=${{ secrets.AWS_DB_USERNAME }} \
        --build-arg AWS_DB_PASSWORD=${{ secrets.AWS_DB_PASSWORD }} \
        --build-arg AWS_DB_HOST=${{ secrets.AWS_DB_HOST }} \
        --build-arg AWS_DB_PORT=${{ secrets.AWS_DB_PORT }} \
        --build-arg AWS_DB_NAME=${{ secrets.AWS_DB_NAME }} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Run Task on Amazon ECS
      uses: smitp/amazon-ecs-run-task@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        cluster: ${{ env.ECS_CLUSTER }}
        count: 1
        started-by: github-actions-${{ github.actor }}
        wait-for-finish: true